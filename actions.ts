/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/

/*=== f2c_end __file ===*/

import { get, patch, post, delete_ } from '$liwe3/utils/fetcher';

/**
 * Adds product in the system.
 * This function returns the full `Product` structure
 *
 * @param name - Product name [req]
 * @param code - Product unique code [opt]
 * @param id_maker - The user id of the product manufacturer [opt]
 * @param id_category - Product Category ID [opt]
 * @param id_availability - ID of availability [default: 0] [opt]
 * @param code_forn - Product unique code assigned by the provider [opt]
 * @param sku - Product SKU [opt]
 * @param description - Product description [opt]
 * @param short_description - Product short description [opt]
 * @param url - Product original URL [opt]
 * @param cost - Cost for buying it [opt]
 * @param price_net - The price, VAT free [opt]
 * @param price_vat - The price with VAT [opt]
 * @param curr_price_net - The current price, VAT free [opt]
 * @param curr_price_vat - The current price with VAT [opt]
 * @param vat - VAT applied [opt]
 * @param free - Flag T/F if the product is free [default: false] [opt]
 * @param discount - Percentage discount [opt]
 * @param quant - Quantity available in the warehouse [default: 0] [opt]
 * @param ordered - Quantity in back order [default: 0] [opt]
 * @param available - Product availability date [opt]
 * @param level - User level required to see the product [default: 0] [opt]
 * @param visible - Flag T/F if the product is visible [default: true] [opt]
 * @param relevance - Importance of the product in search results (the more, the better) [default: 0] [opt]
 * @param status - Product status [default: 0] [opt]
 * @param weight - Product weight (in grams) [default: 0] [opt]
 * @param width - Width of the product in millimiters [default: 0] [opt]
 * @param height - Height of the product in millimiters [default: 0] [opt]
 * @param depth - Depth of the product in millimiters [default: 0] [opt]
 * @param tags - Product tags [opt]
 * @param single - If T, only one item per order can be bought [opt]
 *
 * @return product: Product
 *
 */
export const product_admin_add = async ( name: string, code?: string, id_maker?: string, id_category?: string, id_availability?: number, code_forn?: string, sku?: string, description?: string, short_description?: string, url?: string, cost?: number, price_net?: number, price_vat?: number, curr_price_net?: number, curr_price_vat?: number, vat?: number, free?: boolean, discount?: number, quant?: number, ordered?: number, available?: Date, level?: number, visible?: boolean, relevance?: number, status?: number, weight?: number, width?: number, height?: number, depth?: number, tags?: string[], single?: boolean ) => {
	const res = await post( `/api/product/admin/add`, { 
		available,
		code,
		code_forn,
		cost,
		curr_price_net,
		curr_price_vat,
		depth,
		description,
		discount,
		free,
		height,
		id_availability,
		id_category,
		id_maker,
		level,
		name,
		ordered,
		price_net,
		price_vat,
		quant,
		relevance,
		short_description,
		single,
		sku,
		status,
		tags,
		url,
		vat,
		visible,
		weight,
		width
	 }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_add ===*/

	/*=== f2c_end product_admin_add ===*/

	return res.product;
};

/**
 * Updates the product specified by `id`.
 * This function returns the full `Product` structure
 *
 * @param id - Product ID [req]
 * @param name - Product name [opt]
 * @param code - Product unique code [opt]
 * @param id_maker - The user id of the product manufacturer [opt]
 * @param id_category - Product Category ID [opt]
 * @param id_availability - ID of availability [default: 0] [opt]
 * @param code_forn - Product unique code assigned by the provider [opt]
 * @param sku - Product SKU [opt]
 * @param description - Product description [opt]
 * @param short_description - Product short description [opt]
 * @param url - Product original URL [opt]
 * @param cost - Cost for buying it [opt]
 * @param price_net - The price, VAT free [opt]
 * @param price_vat - The price with VAT [opt]
 * @param curr_price_net - The current price, VAT free [opt]
 * @param curr_price_vat - The current price with VAT [opt]
 * @param vat - VAT applied [opt]
 * @param free - Flag T/F if the product is free [default: false] [opt]
 * @param discount - Percentage discount [opt]
 * @param quant - Quantity available in the warehouse [default: 0] [opt]
 * @param ordered - Quantity in back order [default: 0] [opt]
 * @param available - Product availability date [opt]
 * @param level - User level required to see the product [default: 0] [opt]
 * @param visible - Flag T/F if the product is visible [default: true] [opt]
 * @param relevance - Importance of the product in search results (the more, the better) [default: 0] [opt]
 * @param status - Product status [default: 0] [opt]
 * @param weight - Product weight (in grams) [default: 0] [opt]
 * @param width - Width of the product in millimiters [default: 0] [opt]
 * @param height - Height of the product in millimiters [default: 0] [opt]
 * @param depth - Depth of the product in millimiters [default: 0] [opt]
 * @param tags - Product tags [opt]
 *
 * @return product: Product
 *
 */
export const product_admin_update = async ( id: string, name?: string, code?: string, id_maker?: string, id_category?: string, id_availability?: number, code_forn?: string, sku?: string, description?: string, short_description?: string, url?: string, cost?: number, price_net?: number, price_vat?: number, curr_price_net?: number, curr_price_vat?: number, vat?: number, free?: boolean, discount?: number, quant?: number, ordered?: number, available?: Date, level?: number, visible?: boolean, relevance?: number, status?: number, weight?: number, width?: number, height?: number, depth?: number, tags?: string[] ) => {
	const res = await patch( `/api/product/admin/update`, { 
		available,
		code,
		code_forn,
		cost,
		curr_price_net,
		curr_price_vat,
		depth,
		description,
		discount,
		free,
		height,
		id,
		id_availability,
		id_category,
		id_maker,
		level,
		name,
		ordered,
		price_net,
		price_vat,
		quant,
		relevance,
		short_description,
		sku,
		status,
		tags,
		url,
		vat,
		visible,
		weight,
		width
	 }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_update ===*/

	/*=== f2c_end product_admin_update ===*/

	return res.product;
};

/**
 * The call modifies one or more fields.
 * This function returns the full `Product` structure
 *
 * @param id - The product ID [req]
 * @param data - The field / value to patch [req]
 *
 * @return product: Product
 *
 */
export const product_admin_fields = async ( id: string, data: any ) => {
	const res = await patch( `/api/product/admin/fields`, { id, data }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_fields ===*/

	/*=== f2c_end product_admin_fields ===*/

	return res.product;
};

/**
 * Returns all products.
 * This function returns a list of full `Product` structure.
 * This function supports pagination.
 *
 * @param id_category -  [opt]
 * @param skip -  [opt]
 * @param rows -  [opt]
 *
 * @return products: Product
 *
 */
export const product_admin_list = async ( id_category?: string, skip: number = 0, rows: number = -1 ) => {
	const res = await get( `/api/product/admin/list`, { id_category, skip, rows }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_list ===*/

	/*=== f2c_end product_admin_list ===*/

	return res.products;
};

/**
 * Deletes a product from the system.
 *
 * @param id - The product id to be deleted [req]
 *
 * @return id: str
 *
 */
export const product_admin_del = async ( id: string ) => {
	const res = await delete_( `/api/product/admin/del`, { id }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_del ===*/

	/*=== f2c_end product_admin_del ===*/

	return res.id;
};

/**
 * This endpoint allows you to add tags to a product.
 *
 * @param id - The product ID [req]
 * @param tags - A list of tags to be added to the user [req]
 *
 * @return product: Product
 *
 */
export const product_admin_tag = async ( id: string, tags: string[] ) => {
	const res = await get( `/api/product/admin/tag`, { id, tags }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_tag ===*/

	/*=== f2c_end product_admin_tag ===*/

	return res.product;
};

/**
 * Returns all product details only if the product is `visible`.
 * The product can be identified by  `id`, `code` or `code_forn`.
 * You can pass more than a field, but one is enough.
 * This function returns the full `Product` structure
 *
 * @param id - Product unique ID [opt]
 * @param code - Product unique code [opt]
 * @param code_forn - Product manufacturer's code [opt]
 *
 * @return product: Product
 *
 */
export const product_details = async ( id?: string, code?: string, code_forn?: string ) => {
	const res = await get( `/api/product/details`, { id, code, code_forn }, false );

	if (res.error) return res;

	/*=== f2c_start product_details ===*/

	/*=== f2c_end product_details ===*/

	return res.product;
};

/**
 * Returns all visible products.
 * Products with `visible` set to `false` are not shown.
 * This function returns a list of full `Product` structure.
 * This function supports pagination.
 *
 * @param id_category - The category the product belongs to [opt]
 * @param skip - First line to return [opt]
 * @param rows - How many rows to return [opt]
 *
 * @return products: Product
 *
 */
export const product_list = async ( id_category?: string, skip: number = 0, rows: number = -1 ) => {
	const res = await get( `/api/product/list`, { id_category, skip, rows }, false );

	if (res.error) return res;

	/*=== f2c_start product_list ===*/

	/*=== f2c_end product_list ===*/

	return res.products;
};

/**
 * The product must be specified by its `id`
 *
 * @param id - The product id [req]
 *
 * @return product: Product
 *
 */
export const product_admin_details = async ( id: string ) => {
	const res = await get( `/api/product/admin/details`, { id }, true );

	if (res.error) return res;

	/*=== f2c_start product_admin_details ===*/

	/*=== f2c_end product_admin_details ===*/

	return res.product;
};
